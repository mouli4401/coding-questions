Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30




class Solution {
private:
   void back(vector<int>& candidates,int start,int target,vector<int>& current, vector<vector<int>> &res){
    if(target==0){
        res.push_back(current);
        return;
    }
    if(target<0) return;
    for(int i=start;i<candidates.size();i++){
        if(i>start && candidates[i]==candidates[i-1])continue;
        current.push_back(candidates[i]);
        back(candidates,i+1,target-candidates[i],current,res);
        current.pop_back();
    }
   }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        vector<int> current;
        back(candidates,0,target,current,res);
        return res;
    }
};
